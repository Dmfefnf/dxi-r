{
  "hash": "a5a6e35fe9d7cdc90c402a125e84da16",
  "result": {
    "markdown": "---\n# bibliography: references.bib\n\nabstract: \"\"\n---\n\n\n# Boole'sche Operationen {#sec-chapter-booleans}\n\n::: {.callout-warning}\n## Work in Progress\n::: \n\n\n\n\n::: {.cell}\n\n:::\n\n\nIn R stehen die logischen Operationen als *binäre* Operatoren zur Verfügung, bzw. als Funktionen mit genau zwei Parametern. Diese logischen Operatoren sind vektorisiert. Es ist deshalb unnötig, logische Ausdrücke durch die Boole'sche Arithmetik zu ersetzen. Lediglich die Reihenfolge der Ausführung dieser Opeartoren folgt der gleichen Regel wie die Arithmetik. \n\n::: {.callout-note}\n## Merke\n* Das logische Und entspricht der Multiplikation.\n* Das logische Oder entspricht der Addition.\n:::\n\nDaraus folgt, dass immer zuerst das logische Und und erst danach das logische Oder ausgewertet wird. Dieser Regel folgt auch R. \n\nDie @tbl-logische-operatoren stellt die logischen Operationen und die verschiedenen Schreibweisen gegenüber.\n\n| Operation | neutrales Element |  Mathematisch |  R |  arithmetische Operation |\n| :--- | :--- | :--- | :---: | :---: |\n| Nicht | - | $$ \\lnot $$ |  `!`  | $1 - a$ | \n| Und | WAHR |  $$ \\land $$ | `&` |  $a \\cdot b$ | \n| Oder  | FALSCH | $$ \\lor $$ |  `|`  | $a + b$ |\n| Exklusiv-Oder/Antivalenz  |  - | $$ \\oplus $$ | `xor() `  |  (a - b)^2 |\n\n: Die wichtigsten logischen Operatoren und ihre Entsprechung in R {#tbl-logische-operatoren}\n\n::: {.callout-warning}\n## Achtung\nEs gibt neben den beiden Operatoren `&` und `|` auch die gedoppelte Varianten `&&` und `||`. Diese Varianten arbeiten auf den Binärwerten von Ganzzahlen und werden normalerweise **nicht** im Zusammenhang mit logischen Ausdrücken verwendet. \n::: \n\nDas **Logisches Nicht** wird in R durch den Nicht-Operator (`!`) ausgedrückt. Dieser Operator wird auf jeden Wert eines Vektors einzeln angewandt. \n\n::: {#exm-logisches-nicht}\n## Logisches Nicht\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlogischer_vektor = c(TRUE, FALSE, FALSE, TRUE, TRUE)\n\n! logischer_vektor \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE  TRUE  TRUE FALSE FALSE\n```\n:::\n:::\n\n:::\n\nR wandelt numerische Werte automatisch in Wahrheitswerte um, wenn sie mit logischen Operationen verwendet werden. Dabei gilt: \n\n* `FALSE` entspricht `0`\n* `TRUE` entspricht *ungleich* `0`\n\n::: {#exm-autoconvert-not}\n\n::: {.cell}\n\n```{.r .cell-code}\n! c(1, 2, 0, 4, 0) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE FALSE  TRUE FALSE  TRUE\n```\n:::\n:::\n\n:::\n\nWenn Sie in R zwei Vektoren mit dem Und- (`&`), dem Oder-Operator (`|`) oder der  Antivalenz (`xor()`) verknüpfen, dann werden die Werte **immer** *paarweise* miteinander verglichen. Ein einzelner Vektor kann nicht an die Funktion des jeweiligen Operators übergeben werden. \n\n**Beispiel paarweise Verknüpfung**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvektor_a = c(TRUE, FALSE, FALSE, TRUE, TRUE)\nvektor_b = c(TRUE,  TRUE, FALSE, FALSE, TRUE)\n\nvektor_a & vektor_b \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE FALSE FALSE  TRUE\n```\n:::\n:::\n\n## Logische Aggregationen mit `reduce()`\n\n::: {.callout-note}\n## Merke\nUm logische Vektoren in **R** zu aggregieren, muss der Vektor **reduziert** (engl. *reduce*) werden. Das *Reduzieren* ist eine besondere *Aggregation* über eine Reihe von Werten, bei der jeder Wert gemeinsam mit dem Ergebnis der Vorgängerwerte an eine Funktion übergeben wird.\n:::\n\n::: {#exm-logical-reduce}\n## Aggregation logischer Vektoren\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbeispielWerte = c(TRUE, TRUE, FALSE, TRUE)\n\nbeispielWerte |> reduce(`&`)   \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nbeispielWerte |> reduce(`|`)   \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nbeispielWerte |> reduce(`xor`) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n:::\n\n::: {.callout-important}\nBeim Reduzieren muss beachtet werden, dass eine Funktion und nicht den Operator übergeben wird. Deshalb muss der jeweilige logische Operator in Backticks (`` ` ``) gesetzt und so als Funktionsbezeichner markiert werden. \n:::\n\n## Vergleiche \n\nNeben den logischen Operationen sind Vergleiche ein wichtiges Konzept, das wir in logischen Ausdrücken regelmässig anwenden. \n\nEs gibt genau sechs (6) Vergleichsoperatoren:\n\n* Gleich (`==`)\n* Ungleich (`!=`)\n* Grösser als (`>`)\n* Grösser gleich (`>=`)\n* Kleiner als (`<`)\n* Kleiner gleich (`<=`)\n\n::: {.callout-warning}\nVergleiche erfordern, dass beide Werte vom gleichen Datentyp sind.\n:::\n\nDie Vergleiche funktionieren für alle fundamentalen Datentypen.\n\nBei Zeichenketten wertet R die alphabetische Reihenfolge der Symbole vom Beginn einer Zeichenkette aus, um grösser oder kleiner Vergleiche durchzuführen.\n\n### Die Existenz eines Werts in einem Vektor überprüfen\n\nHäufig müssen Sie überprüfen, ob ein Wert in einer Liste vorkommt. Grundsätzlich können Sie das mit komplizierten logischen Verknüpfungen in der Art von @exm-check-without-in schreiben.\n\n::: {#exm-check-without-in}\n## Existstenzprüfung ohne `%in%`\n\n::: {.cell}\n\n```{.r .cell-code}\nmeinWert = 3\nwertVektor = c(8, 2, 3)\n\nmeinWert == wertVektor[1] | meinWert == wertVektor[2] | meinWert == wertVektor[3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n:::\n\nEinfacher ist aber ein sogenannter *Existenztest*. Dabei wird überprüft, ob ein Wert in einem Vektor vorkommt. Ein solcher Test lässt sich wie in @exm-check-with-in schreiben: \n\n::: {#exm-check-with-in}\n## Existstenzprüfung mit `%in%`\n\n::: {.cell}\n\n```{.r .cell-code}\nmeinWert = 3\nwertVektor = c(8, 2, 3)\n\nmeinWert %in% wertVektor\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n:::\n\nEntsprechend der Definition des Existenzvergleichs $\\in$ funktioniert R's `%in%`-Operator auch für Vektoren als linker Operand.\n\n## Fälle unterscheiden\n\n### Bedingte Operationen\n\n### Vektorisierte Unterscheidungen\n\n## Filtern\n\n## Selektieren\n\n::: {.callout-tip}\n## Praxis\n\nDie `tidyverse` Bibliothek umfasst die [`tidyselect`-Funktionen](https://tidyselect.r-lib.org/reference/language.html). Dabei handelt es sich um eine Reihe von Hilfsfunktionen, die die Vektorenauswahl nachvollziehbarer macht. Auf der [`tidyselect`-Homepage](https://tidyselect.r-lib.org/) finden sich ausführliche Code-Beispiele. \n:::\n\nIn R können Vektoren mit der Funktion `select()` selektiert werden. Dieser Funktion werden Regeln übergeben, nach denen die Vektoren auswählt werden sollen. Die einfachste Regel ist die direkte Eingabe der Vektorennamen. Ein typischer Anwendungsfall ist die Datenbereinigung, damit die Funktion `drop_na()` nicht zu viele Datensätze löscht. Diese Situation kommt vor, wenn ein Datenrahmen viele fehlende Werte enthält, die ungleichmässig in den Vektoren vorkommen. Die Analyse muss deshalb auf die gewünschten Vektoren beschränkt werden. \n\nFür die folgenden Beispiele verwenden wir die Daten der Befragung zum digitalen Umfeld, die mit der `read_delim()`-Funktion eingelesen wird. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nstichprobe = read_delim(\"daten/befragung_digitales_umfeld/deviceuse.csv\") \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 76 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): q00_demo_gen, q00_demo_studyload, q01_mob_typ, q12_fav_apps\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\n### Vektoren direkt selektieren\n\nWir wollen die Vektoren `q00_demo_gen` (Gender), `q00_demo_studyload` (Studienmodell) und `q01_mob_typ` (Mobile OS des Smartphones) auswählen. \n\n::: {#exm-select-direkt}\n## Direktes selektieren\n\n::: {.cell}\n\n```{.r .cell-code}\nstichprobe |>\n    select(q00_demo_gen, q00_demo_studyload, q01_mob_typ) |>\n    head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n  q00_demo_gen q00_demo_studyload q01_mob_typ       \n  <chr>        <chr>              <chr>             \n1 Weiblich     Vollzeit           iPhone            \n2 Weiblich     Vollzeit           iPhone            \n3 Weiblich     Teilzeit           iPhone            \n4 Weiblich     Teilzeit           iPhone            \n5 Männlich     <NA>               Android Smartphone\n6 Weiblich     Vollzeit           iPhone            \n```\n:::\n:::\n\n:::\n\nDurch diesen Aufruf von `select()` wird der Datenrahmen auf die drei ausgewählten Vektoren reduziert. \n\n### Alle ausser die benannten Vektoren selektieren\n\nVektoren direkt zu benennen ist eine einfache direkte Methode. Wenn man sehr viele Vektoren auswählen möchte, dann ist es manchmal einfacher, nur die Vektoren anzugeben, die *nicht* in der Ergebnisstichprobe enthalten sein sollen. Mit `select()` erreichen wir das, indem wir ein `-` den ungewollten Vektoren voranstellen. \n\nDas folgende Beispiel selektiert alle Vektoren ausser `q00_demo_gen` aus der Stichprobe. \n\n::: {#exm-select-direkt-neg}\n## Selektieren durch Ausschliessen\n```R\nstichprobe |>\n    select(-q00_demo_gen) |>\n    head()\n```\n:::\n\nWenn  mehrere Vektoren ausgeschlossen werden sollen, dann müssen diese zu einem Vektor zusammengefasst werden. \n\n::: {#exm-select-direkt-neg-multi}\n## Selektieren durch mehrfaches Ausschliessen\n```R\nstichprobe |>\n    select(- c(q00_demo_gen, q00_demo_studyload)) |>\n    head()\n```\n:::\n\nDiese Vektorenauswahl wählt alle Vektoren ausser das Geschlecht und das Studienmodell. \n\n### Vektoren mit ähnlichen Namen auswählen\n\nDrei leistungsfähige Hilfsfunktionen für `select()` sind: \n\n- `starts_with()`,\n- `ends_with()` sowie\n- `contains()`\n\nDiesen Funktionen akzeptieren einen Teilnamen, über den mehrere Vektoren ausgewählt werden, in denen der angegebene Teil im Vektornamen vorkommt. \n\nDiese Funktionen lassen sich mittels der `iris`-Stichprobe  veranschaulichen.\n\n::: {#exm-select-starts-with}\n## Selektieren mit `starts_with()`\n\n::: {.cell}\n\n```{.r .cell-code}\niris %>%\n    select(starts_with(\"Sepal\")) |>  # wählt die Vektoren Sepal.Width und Sepal.Length aus\n    head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Sepal.Length Sepal.Width\n1          5.1         3.5\n2          4.9         3.0\n3          4.7         3.2\n4          4.6         3.1\n5          5.0         3.6\n6          5.4         3.9\n```\n:::\n:::\n\n:::\n\n::: {#exm-select-ends-with}\n## Selektieren mit `ends_with()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris %>%\n    select(ends_with(\"Length\")) |> # wählt die Vektoren Petal.Length und Sepal.Length aus\n    head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Sepal.Length Petal.Length\n1          5.1          1.4\n2          4.9          1.4\n3          4.7          1.3\n4          4.6          1.5\n5          5.0          1.4\n6          5.4          1.7\n```\n:::\n:::\n\n:::\n\n### Alle Vektoren zwischen zwei benannten Vektoren auswählen\n\nEine weitere Möglichkeit schneller viele Vektoren auszuwählen ist der `:`-Operator. Damit können wir alle Vektoren zwischen zwei Vektoren inklusive der benannten Vektoren auswählen.\n\nDer folgende Aufruf veranschaulicht dies: \n::: {#exm-select-range}\n## Vektorenbereich selektieren\n\n::: {.cell}\n\n```{.r .cell-code}\nstichprobe |>\n    select(q00_demo_gen:q01_mob_typ) |>\n    head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n  q00_demo_gen q00_demo_studyload q01_mob_typ       \n  <chr>        <chr>              <chr>             \n1 Weiblich     Vollzeit           iPhone            \n2 Weiblich     Vollzeit           iPhone            \n3 Weiblich     Teilzeit           iPhone            \n4 Weiblich     Teilzeit           iPhone            \n5 Männlich     <NA>               Android Smartphone\n6 Weiblich     Vollzeit           iPhone            \n```\n:::\n:::\n\n:::\n\nDiese Vektorenauswahl wählt die Vektoren `q00_demo_gen`, `q00_demo_studyload` und `q01_mob_typ` für das Ergebnis aus.\n\n::: {.callout-warning}\nDie Reihenfolge von Vektoren kann durch andere Transformationen geändert werden. Deshalb sollte das Selektieren mit Vektorbereichen vermieden werden.\n:::\n\n\n## Sortieren\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}