{
  "hash": "8bbd6d6eb0470eb3b0dee2a01d5adaf0",
  "result": {
    "markdown": "# Indizieren und Gruppieren {#sec-chapter-indizieren-gruppieren}\n\n::: {.callout-warning}\n## Work in Progress\n::: \n\n## Indizieren\n\nEs werden drei Arten von Indizes unterschieden: \n\n1. Der **Primärindex**, mit dem ein einzelner Datensatz eindeutig *identifiziert* werden kann. \n2. **Fremdschlüssel** sind Sekundärindizes für *Querverweise* auf eine zweite Datenstruktur (eine sog. *Indextabelle* oder engl. *Lookup-Table*).\n3. **Gruppenindizes** sind Sekundärindizes zur Identifikation von Datensätzen mit *gemeinsamen Eigenschaften*.\n\nWeil ein Index Werte über einen Datensatz enthält, gehört ein Index zum jeweiligen Datensatz und wird über einen *Indexvektor* in einer Stichprobe abgebildet.\n\n### Hashing eines Primärindex\n\nDie einfachste Technik zur eindeutigen Indizierung ist das ***Durchnummerieren*** der Datensätze einer Stichprobe. Bei dieser Technik wird jedem Datensatz eine Nummer zugewiesen. In R verwenden wir dazu die Funktion `row_number()`. Diese Funktion ist einer *Sequenz* vorzuziehen, weil diese Funktion auch bei leeren Stichproben fehlerfrei arbeitet.\n\n::: {.callout-warning}\nIntuitiv würde man beim Durchnummerieren an seine Sequenz von `1:n()` denken. Diese Sequenz führt aber für leere Datenrahmen zu Fehlermeldungen. Die Funktion `row_number()` kann mit leeren Datenrahmen umgehen und erzeugt dieses Problem nicht.\n::: \n\n::: {#exm-durchnummerieren}\n## Primärindex erzeugen\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars |> \n    as_tibble(rownames = \"modell\") ->\n        mtcars_df\n\nmtcars_df |> \n    mutate(\n        nr = row_number()\n    ) -> \n        mtcars_df_nbr\n\n# Nummerierung zeigen\nmtcars_df_nbr |> \n    head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 13\n  modell   mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb    nr\n  <chr>  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <int>\n1 Mazda~  21       6   160   110  3.9   2.62  16.5     0     1     4     4     1\n2 Mazda~  21       6   160   110  3.9   2.88  17.0     0     1     4     4     2\n3 Datsu~  22.8     4   108    93  3.85  2.32  18.6     1     1     4     1     3\n4 Horne~  21.4     6   258   110  3.08  3.22  19.4     1     0     3     1     4\n5 Horne~  18.7     8   360   175  3.15  3.44  17.0     0     0     3     2     5\n6 Valia~  18.1     6   225   105  2.76  3.46  20.2     1     0     3     1     6\n```\n:::\n:::\n\n\n:::\n\n### Hashing zum Gruppieren\n\nBeim Hashing zum Gruppieren müssen wir Werte erzeugen, die eine Zuordnung zu einer Gruppe oder einen Wert in einer anderen Stichprobe ermöglichen. Die Hashing-Funktion orientiert sich dabei an den konkreten Analyseanforderungen. \n\nVier gängige Techniken können dabei unterschieden werden: \n\n- Kodieren (alle Datentypen)\n- Reihenfolgen bilden durch Ganzzahldivision (nur Zahlen)\n- Reihenfolgen bilden durch Modulo-Operation (nur Zahlen)\n- Reihenfolgen durch Anfangsbuchstaben (nur Zeichenketten)\n\n#### Beispiel Hashing zum Gruppieren.\n\nDas folgende Beispiel bildet einen Index, um die Motorisierung der Fahrzeugtypen in der Stichprobe `mtcars` zu bestimmen. Dabei sollen die Modelle in schwach-, mittel-, stark- und sehr starkmotorisierte Typen unterschieden werden. Die Motorisierung richtet sich dabei zum einen nach der Leistung (`hp`). Zum anderen richtet sich die Motorisierung nach dem Fahrzeuggewicht (`wt`), weil für ein schweres Fahrzeug mehr Leistung zum Bewegen benötigt wird als für ein leichtes. Um beide Werte zu berücksichtigen, wird das Verhältnis der beiden Werte bestimmt. Ein Verhältnis ist eine *Division*. In diesem Fall wird das Gewicht als Nenner verwendet und die Leistung als Zähler. So ergeben sich immer Werte grösser als 1, weil die Leistung immer viel grösser als das Gewicht ist.\n\nIn diesem Beispiel besteht die Hashing-Funktion aus zwei Teilen: \n\n1. Das Verhältnis zwischen Leistung und Gewicht wird bestimmt und im Vektor `verhaeltnis` abgelegt. \n2. Die Leistungsklassen werden durch *Kodieren* den oben festgelegten Klassen zugewiesen und im Vektor `klasse` gespeichert.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars_df |> \n    mutate(\n        verhaeltnis = hp/wt, \n        klasse = case_when( \n            verhaeltnis > 60 ~ \"sehr stark\",\n            verhaeltnis > 50 ~ \"stark\", \n            verhaeltnis > 40 ~ \"mittel\", \n            TRUE ~ \"schwach\") \n    ) |>\n    # nur die relevanten Vektoren zeigen\n    select(modell, hp, wt, verhaeltnis, klasse)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 32 x 5\n   modell               hp    wt verhaeltnis klasse    \n   <chr>             <dbl> <dbl>       <dbl> <chr>     \n 1 Mazda RX4           110  2.62        42.0 mittel    \n 2 Mazda RX4 Wag       110  2.88        38.3 schwach   \n 3 Datsun 710           93  2.32        40.1 mittel    \n 4 Hornet 4 Drive      110  3.22        34.2 schwach   \n 5 Hornet Sportabout   175  3.44        50.9 stark     \n 6 Valiant             105  3.46        30.3 schwach   \n 7 Duster 360          245  3.57        68.6 sehr stark\n 8 Merc 240D            62  3.19        19.4 schwach   \n 9 Merc 230             95  3.15        30.2 schwach   \n10 Merc 280            123  3.44        35.8 schwach   \n# i 22 more rows\n```\n:::\n:::\n\n\n\n\n### Hashing für Querverweise\n\nBeim Hashing für Querverweise gibt es zwei Stichproben. Die erste Stichprobe ist die Hauptstichprobe mit den eigentlichen Werten. Die zweite Stichprobe ist die Referenzstichprobe, die zusätzliche Informationen enthält. Ein Indexvektor für Querverweise in der ersten Stichprobe bezieht sich immer auf einen Primärindex aus der zweiten Stichprobe.\n\nDie Hashing-Funktion muss deshalb einen Verweis zur zweiten Stichprobe herstellen. Diese Verbindung kann mit der gleichen Strategie erzeugt werden, wie beim Gruppieren. Dabei muss jedoch darauf geachtet werden, dass alle Zuordnungen des Primärvektors korrekt abgebildet sind. \n\n## Gruppieren\n\n",
    "supporting": [
      "kapitel_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}