{
  "hash": "f80622b3d57e8e4655ddc51b14e269ad",
  "result": {
    "markdown": "---\nabstract: \"\"\n---\n\n\n# Matrix-Operationen {#sec-chapter-matrix-operationen}\n\n\n\n\n\n::: {.callout-warning}\n## Work in Progress\n:::\n\nMatrizen sind in R 2-dimensionale *numerische* Vektoren, die aus Zeilen und Spalten bestehen. Die Anzahl der Zeilen und Spalten gibt die *Dimensionalität* der Matrix an. Allgemein wird von einer $m\\timesn$-Matrix gesprochen, wobei $m$ für die Anzahl der Zeilen und $n$ für die Anzahl der Spalten steht. \n\n::: {.callout-note}\n## Merke\nBei Matrizen werden immer zuerst die Zeilen und dann die Spalten angegeben.\n:::\n\n## Matrizen erstellen\n\nEine Matrix wird in R mit der Funktion `matrix()` erstellt. Diese Funktion erwartet einen Vektor als erstes Argument. Zusätzlich muss mit `ncol` oder `nrow` angegeben werden, wie viele Spalten bzw. Zeilen die Matrix haben soll. Der optionale Paramter `byrow` zeigt an, ob die Werte zeilen- oder spaltenweise in die Matrix übernommen werden sollen. Die Zeilenschreibweise erleichtert die Eingabe einer Matrix (@exm-matrix-erstellen-komplett). \n\n::: {#exm-matrix-erstellen-komplett}\n# Matrix in Zeilenschreibweise erzeugen\n\n::: {.cell}\n\n```{.r .cell-code}\n( # Diese Klammer gibt das Ergebnis der Operation aus.\n    matrixA = matrix( \n    c( \n        1, 2, 3,\n        3, 2, 1\n    ), ncol = 3, nrow = 2, byrow = TRUE)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    3    2    1\n```\n:::\n:::\n\n::: \n\nIst die Länge des Eingabevektors grösser als die gewünschten Zeilen- oder Spaltenanzahl erlauben, dann werden alle überzähligen Werte verworfen (@exm-matrix-erstellen-überzählig) und eine Warnung erzeugt. \n\n::: {.callout-tip}\n## Praxis\nEs muss nur die Anzahl der Spalten oder der Zeilen beim Erzeugen einer Matrix angegeben werden. Der jeweils andere Wert wird aus der Länge und dem angegebenen Wert ermittelt. \n:::\n\n::: {#exm-matrix-erstellen-überzählig}\n## Matrix mit überlangem Eingabevektor erzeugen\n\n::: {.cell}\n\n```{.r .cell-code}\nmatrix( \n    c( \n        1, 2, 3,\n        3, 2, 1,\n        4, 5, 6\n    ), ncol = 3, nrow = 2, byrow = TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in matrix(c(1, 2, 3, 3, 2, 1, 4, 5, 6), ncol = 3, nrow = 2, byrow =\nTRUE): Datenlänge [9] ist kein Teiler oder Vielfaches der Anzahl der Zeilen [2]\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    3    2    1\n```\n:::\n:::\n\n::: \n\nIst die Länge des Eingabevektors kürzer als für eine Matrix mit den gewünschten Dimensionen notwendig wäre, dann wird der Vektor wie bei einer Vektortransformation solange wiederholt, bis alle Positionen in der Matrix besetzt sind (@exm-matrix-erstellen-auffüllen). Ist der Vektor kein Vielfaches der Zeilen- oder der Spaltenzahl, dann werden alle überzähligen Werte mit einer entsprechenden Warnung verworfen. \n\n::: {#exm-matrix-erstellen-auffüllen}\n## Matrix durch Auffüllen des Eingabevektors erzeugen\n\n::: {.cell}\n\n```{.r .cell-code}\nmatrix( \n    c( \n        1, 2, 3\n    ), ncol = 4, nrow = 3, byrow = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4]\n[1,]    1    2    3    1\n[2,]    2    3    1    2\n[3,]    3    1    2    3\n```\n:::\n:::\n\n::: \n\n\n## Matrixdimensionen\n\nDie *Länge* einer Matrix entspricht der Anzahl der Positionen in der Matrix und kann wie bei Vektoren mit der Funktion `length()` ermittelt werden. Diese Information ist jedoch nicht sehr nützlich.\n\nDie Dimensionalität einer Matrix wird mit der Funktion `dim()` ausgegeben. Das Ergebnis dieser Funktion gibt einen Vektor der Länge `2` zurück. Das erste Element dieses Vektors enthält die Anzahl der Zeilen und das zweite Element enthält die Anzahl der Spalten der Matrix. \n\n::: {#exm-matrix-dimensions}\n## Matrixdimensionen mit `dim()` abfragen\n\n::: {.cell}\n\n```{.r .cell-code}\nmatrixA |> dim()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 3\n```\n:::\n:::\n\n:::\n\nDie beiden Werte können separat mit den beiden Funktionen `nrow()` und `ncol()` abgefragt werden.\n\n::: {#exm-matrix-dimensions-separate}\n## Matrixdimensionen mit `nrow()` und `ncol()` abfragen\n\n::: {.cell}\n\n```{.r .cell-code}\nmatrixA |> nrow()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\nmatrixA |> ncol()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n:::\n\n## Matrixwerte referenzieren\n\nDas Referenzieren von Werten einer Matrix erfolgt analog zum Referenzieren von Vektorwerten. Der Index eines Werts einer Matrix ist über die Zeilen und die Spalten definiert. \n\n::: {#exm-matrix-werte-referenzieren}\n## Matrixwerte referenzieren\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmatrixA[2,1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n:::\n\nÜber diese Notation ist es möglich eine ganze Zeile oder eine ganze Spalte einer Matrix zu referenzieren.\n\n::: {#exm-matrix-spalte-referenzieren}\n## Matrixspalten und -zeilen referenzieren\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmatrixA[2,]  # Zeile 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3 2 1\n```\n:::\n\n```{.r .cell-code}\nmatrixA[, 2] # Spalte 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 2\n```\n:::\n:::\n\n:::\n\n::: {.callout-warning}\n## Achtung\n\nEine Matrix bleibt im Hintergrund eine Vektorstruktur. Wird der Separator zwischen den Zeilen- und Spaltenindex weggelassen und nur *ein* Index angegeben, dann behandelt R die Matrix als Vektor in der spaltenweisen Form. Die Reihenfolge der Werte kann mit der Funktion `as.vector()` angezeigt werden. Das gleiche gilt für die Verwendung der Konkatenation ohne das dimensionstrennende Komma.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmatrixA |> as.vector()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 3 2 2 3 1\n```\n:::\n\n```{.r .cell-code}\nmatrixA[2,3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\nmatrixA[c(2,3)] \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3 2\n```\n:::\n\n```{.r .cell-code}\nmatrixA[,c(2,3)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]    2    3\n[2,]    2    1\n```\n:::\n:::\n\n::: \n\n## Matrizen transponieren\n\nBeim Transponieren einer Matrix werden die Indizes für alle Werte vertauscht. Diese Operation übernimmt die R-Funktion `t()`.\n\n::: {#exm-matrix-transponieren}\n## Eine Matrix transponieren\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmatrixA |> t()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    2\n[3,]    3    1\n```\n:::\n:::\n\n:::\n\n::: {.callout-note}\n## Merke\n\nBeim **Transponieren einer Matrix** werden die Spalten in Zeilen bzw. die Zeilen in Spalten umgewandelt.\n:::\n\n## Vektorform\n\nMatrizen kennen zwei Arten der Vektorform:\n\n- Die spaltenweise Vektorform, bei der die Spaltenvektoren einer Matrix zu einem  Vektor konkateniert werden. \n- Die zeilenweise Vektorform, bei der die Zeilenvektoren einer Matrix zu einem Vektor konkateniert werden. \n\nR speichert eine Matrix intern in ihrer spaltenweisen Vektorform. Die spaltenweise Vektorform kann also direkt über die Funktion `as.vector()` ermittelt werden. Das gleiche Ergebnis wird erzeugt, wenn die Matrix der Vektorkonkatenation `c()` als Argument übergeben wird (@exm-column-vectorform).\n\n::: {.callout-tip}\n## Praxis\n\nWeil bei der Verwendung der Funktion `c()` nicht leicht ersichtlich ist, dass die Vektorform ermittelt wird, sollte für diese Operation immer die Funktion  `as.vector()`  verwendet werden.\n:::\n\n::: {#exm-column-vectorform}\n## Spaltenweise Vektorform einer Matrix\n\n::: {.cell}\n\n```{.r .cell-code}\nmatrixA |> as.vector()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 3 2 2 3 1\n```\n:::\n\n```{.r .cell-code}\nmatrixA |> c()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 3 2 2 3 1\n```\n:::\n:::\n\n:::\n\nBeim Umwandeln einer Matrix in ihre **zeilenweise Vektorform** wird in R ausgenutzt, dass diese Vektorform identisch mit der spaltenweisen Vektorform ihrer transponierten Matrix ist. Diese Gleichheit ergibt sich aus dem Transponieren, bei der Zeilen in Spalten umgewandelt werden (@exm-row-vectorform).\n\n::: {#exm-row-vectorform}\n## Zeilenweise Vektorform einer Matrix\n\n::: {.cell}\n\n```{.r .cell-code}\nmatrixA |> t() |> as.vector()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 3 2 1\n```\n:::\n\n```{.r .cell-code}\nmatrixA |> t() |> c()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 3 2 1\n```\n:::\n:::\n\n:::\n\n\n## Skalar- und Vektortransformationen\n\nBei Skalartransformationen wird ein einzelner Wert mit jedem Wert in der Matrix verknüpft. \n\n::: {#exm-skalar-matrix-transformation}\n## Skalaraddition mit einer Matrix\n\n::: {.cell}\n\n```{.r .cell-code}\n2 * matrixA\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    2    4    6\n[2,]    6    4    2\n```\n:::\n:::\n\n:::\n\n\n::: {#exm-vektor-matrix-transformation}\n## Vektoraddition mit einer Matrix\n\n::: {.cell}\n\n```{.r .cell-code}\nmatrixA + 1:2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    2    3    4\n[2,]    5    4    3\n```\n:::\n:::\n\n:::\n\n## Vektoraddition\n\n\n\n### Matrizen vergleichen\n\n## Einheitsmatrix erzeugen\n\n\n\n\n\n## Skalarmultiplikation\n\n## Matrixmultiplikation/Kreuzprodukt\n\n### Zeilen- und Spaltensummen\n\n## Äusseres Vektorprodukt\n\n\n### Dreieckmatrizen erzeugen\n\n### Vorgänger- und Nachfolgersummen\n\n## Co-Occurence Matrizen\n\nEine Co-Occurence Matrix oder **Kontingenztabelle** aus zwei Vektoren lässt sich am leichtesten mit der `table()`-Funktion erstellen. Diese Funktion zählt das gemeinsame Auftreten von Werten in zwei *gleichlangen* Vektoren von beliebigen Datentyp.\n\nDas Ergebnis ist eine benannte Matrix, wobei die Zeilen den Werten im ersten Vektor und die Spalten den Werten im zweiten Vektor entsprechen.\n\n::: {#exm-coocmatrix-table}\n## Kontingenztabelle für zwei Vektoren\n\n::: {.cell}\n\n```{.r .cell-code}\nv1 = c(1, 2, 4, 3, 2, 1, 1, 2, 4)\nv2 = c(9, 8, 7, 7, 7, 8, 9, 9, 8)\n\n(ctable = table(v1, v2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   v2\nv1  7 8 9\n  1 0 1 2\n  2 1 1 1\n  3 1 0 0\n  4 1 1 0\n```\n:::\n\n```{.r .cell-code}\nctable[,2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1 2 3 4 \n1 1 0 1 \n```\n:::\n\n```{.r .cell-code}\nctable[3,]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n7 8 9 \n1 0 0 \n```\n:::\n:::\n\n:::\n\n## `Matrix`-Bibliothek\n\n### Determinanten\n\n### Inverse Matrix\n\n",
    "supporting": [
      "kapitel_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}