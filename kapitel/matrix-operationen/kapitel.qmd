---
abstract: ""
---

# Matrix-Operationen {#sec-chapter-matrix-operationen}

```{r, include=FALSE}
library(tidyverse)
```

Matrizen sind in R 2-dimensionale *numerische* Vektoren, die aus Zeilen und Spalten bestehen. Die Anzahl der Zeilen und Spalten gibt die *Dimensionalität* der Matrix an. Allgemein wird von einer $m \times n$-Matrix gesprochen, wobei $m$ für die Anzahl der Zeilen und $n$ für die Anzahl der Spalten steht. 

::: {.callout-note}
## Merke
Bei Matrizen werden immer zuerst die Zeilen und dann die Spalten angegeben.
:::

## Matrizen erstellen

Eine Matrix wird in R mit der Funktion `matrix()` erstellt. Diese Funktion erwartet einen Vektor als erstes Argument. Zusätzlich muss mit `ncol` oder `nrow` angegeben werden, wie viele Spalten bzw. Zeilen die Matrix haben soll. Der optionale Paramter `byrow` zeigt an, ob die Werte zeilen- oder spaltenweise in die Matrix übernommen werden sollen. Die Zeilenschreibweise erleichtert die Eingabe einer Matrix (@exm-matrix-erstellen-komplett). 

::: {#exm-matrix-erstellen-komplett}
# Matrix in Zeilenschreibweise erzeugen
```{r}
( # Diese Klammer gibt das Ergebnis der Operation aus.
    matrixA = matrix( 
    c( 
        1, 2, 3,
        3, 2, 1
    ), ncol = 3, nrow = 2, byrow = TRUE)
)
```
::: 

Ist die Länge des Eingabevektors grösser als die gewünschten Zeilen- oder Spaltenanzahl erlauben, dann werden alle überzähligen Werte verworfen (@exm-matrix-erstellen-überzählig) und eine Warnung erzeugt. 

::: {.callout-tip}
## Praxis
Es muss nur die Anzahl der Spalten oder der Zeilen beim Erzeugen einer Matrix angegeben werden. Der jeweils andere Wert wird aus der Länge und dem angegebenen Wert ermittelt. 
:::

::: {#exm-matrix-erstellen-überzählig}
## Matrix mit überlangem Eingabevektor erzeugen
```{r}
matrix( 
    c( 
        1, 2, 3,
        3, 2, 1,
        4, 5, 6
    ), ncol = 3, nrow = 2, byrow = TRUE)
```
::: 

Ist die Länge des Eingabevektors kürzer als für eine Matrix mit den gewünschten Dimensionen notwendig wäre, dann wird der Vektor wie bei einer Vektortransformation solange wiederholt, bis alle Positionen in der Matrix besetzt sind (@exm-matrix-erstellen-auffüllen). Ist der Vektor kein Vielfaches der Zeilen- oder der Spaltenzahl, dann werden alle überzähligen Werte mit einer entsprechenden Warnung verworfen. 

::: {#exm-matrix-erstellen-auffüllen}
## Matrix durch Auffüllen des Eingabevektors erzeugen
```{r}
matrix( 
    c( 
        1, 2, 3
    ), ncol = 4, nrow = 3, byrow = TRUE)
```
::: 


### Identitätsmatrix erzeugen

Die Identitätsmatrix ist eine quadratische Diagonalmatrix, wobei an allen Positionen der Hauptdiagonalen der Wert `1` steht. Diese Matrix wird in R mit der Funktion `diag()` erzeugt (@exm-identitätsmatrix). 

::: {#exm-identitätsmatrix}
## 5x5 Identitätsmatrix
```{r}
diag(5)
```
:::

## Matrixdimensionen

Die *Länge* einer Matrix entspricht der Anzahl der Positionen in der Matrix und kann wie bei Vektoren mit der Funktion `length()` ermittelt werden. Diese Information ist jedoch nicht sehr nützlich.

Die Dimensionalität einer Matrix wird mit der Funktion `dim()` ausgegeben. Das Ergebnis dieser Funktion gibt einen Vektor der Länge `2` zurück. Das erste Element dieses Vektors enthält die Anzahl der Zeilen und das zweite Element enthält die Anzahl der Spalten der Matrix. 

::: {#exm-matrix-dimensions}
## Matrixdimensionen mit `dim()` abfragen
```{r}
matrixA |> dim()
```
:::

Die beiden Werte können separat mit den beiden Funktionen `nrow()` und `ncol()` abgefragt werden.

::: {#exm-matrix-dimensions-separate}
## Matrixdimensionen mit `nrow()` und `ncol()` abfragen
```{r}
matrixA |> nrow()
matrixA |> ncol()
```
:::

## Matrixwerte referenzieren

Das Referenzieren von Werten einer Matrix erfolgt analog zum Referenzieren von Vektorwerten. Der Index eines Werts einer Matrix ist über die Zeilen und die Spalten definiert. 

::: {#exm-matrix-werte-referenzieren}
## Matrixwerte referenzieren

```{r}
matrixA[2,1]
```
:::

Über diese Notation ist es möglich eine ganze Zeile oder eine ganze Spalte einer Matrix zu referenzieren.

::: {#exm-matrix-spalte-referenzieren}
## Matrixspalten und -zeilen referenzieren

```{r}
matrixA[2,]  # Zeile 2
matrixA[, 2] # Spalte 2
```
:::

::: {.callout-warning}
## Achtung

Eine Matrix bleibt im Hintergrund eine Vektorstruktur. Wird der Separator zwischen den Zeilen- und Spaltenindex weggelassen und nur *ein* Index angegeben, dann behandelt R die Matrix als Vektor in der spaltenweisen Form. Die Reihenfolge der Werte kann mit der Funktion `as.vector()` angezeigt werden. Das gleiche gilt für die Verwendung der Konkatenation ohne das dimensionstrennende Komma.

```{r}
matrixA |> as.vector()
matrixA[2,3]
matrixA[c(2,3)] 
matrixA[,c(2,3)]
```
::: 

### Zeilen- und Spaltenüberschriften

Die Zeilen- und Spalten einer Matrix können in R mit Überschriften ***benannt*** werden. Das Benennen erfolgt über einen sog. Namensvektor. Diese Vektor muss die gleiche Länge haben, wie die Anzahl der zu benennenden Zeilen bzw. Spalten der Matrix, wobei die Zeilen und Spalten nicht gleichzeitig benannt werden können. 

::: {.callout-note}
## Merke
Die Zeilen- und Spaltennamen gehören nicht zu den Werten einer Matrix und werden in Operationen in der Regel nicht berücksichtigt.
:::

::: {#exm-zeilennamen-zuweisen}
## Zeilennamen zuweisen
```{r}
rownames(matrixA) <- c("oben", "unten")
colnames(matrixA) <- c("links", "mitte", "rechts")

matrixA
```
:::

::: {.callout-tip}
## Praxis

Grundsätzlich kann auch die Funktionsverkettung beim Benennen der Zeilen oder Spalten einer Matrix verwendet werden. 

```r
matrixA |> rownames() <- c("oben", "unten")
```

Diese Verwendung sollte allerdings vermieden werden, weil die Zuweisung und der Datenstrom in diesen Fällen gegenläufig wären. 
:::

Nachdem eine Zeile oder eine Spalte benannt wurde, werden die Namen in allen nachfolgenden Zugriffen immer in das Ergebnis aufgenommen. Ausserdem können die Namen zur Referenzierung der Werte verwendet werden (@exm-zeilennamen-referenzierung). 

::: {#exm-zeilennamen-referenzierung}
## Zeilennamen zur Rerferenzierung verwenden
```{r}
matrixA["oben",]
matrixA["unten", "mitte"]
```
:::

Es ist möglich einzelne Zeilen- oder Spaltennamen zuzuweisen oder zu ändern (@exm-zeilennamen-ändern).

::: {#exm-zeilennamen-ändern}
## Zeilennamen ändern
```{r}
colnames(matrixA)[2] <- "zentrum"

matrixA
```
:::

Die Namen einer Matrix lassen sich entfernen, indem den Zeilen- oder Spaltennamen der Wert `NULL` zugewiesen wird. 

::: {#exm-zeilennamen-entfernen}
## Zeilennamen entfernen

```{r}
rownames(matrixA) <- NULL
colnames(matrixA) <- NULL

matrixA
```
:::

## Matrizen transponieren

Beim Transponieren einer Matrix werden die Indizes für alle Werte vertauscht. Diese Operation übernimmt die R-Funktion `t()`.

::: {#exm-matrix-transponieren}
## Eine Matrix transponieren

```{r}
matrixA |> t()
```
:::

::: {.callout-note}
## Merke

Beim **Transponieren einer Matrix** werden die Spalten in Zeilen bzw. die Zeilen in Spalten umgewandelt.
:::

::: {.callout-tip}
Beim Transponieren werden vorhandene Zeilen- und Spaltennamen mittransponiert.
:::

## Vektorform

Matrizen kennen zwei Arten der Vektorform:

- Die spaltenweise Vektorform, bei der die Spaltenvektoren einer Matrix zu einem  Vektor konkateniert werden. 
- Die zeilenweise Vektorform, bei der die Zeilenvektoren einer Matrix zu einem Vektor konkateniert werden. 

R speichert eine Matrix intern in ihrer spaltenweisen Vektorform. Die spaltenweise Vektorform kann also direkt über die Funktion `as.vector()` ermittelt werden. Das gleiche Ergebnis wird erzeugt, wenn die Matrix der Vektorkonkatenation `c()` als Argument übergeben wird (@exm-column-vectorform).

::: {.callout-tip}
## Praxis

Weil bei der Verwendung der Funktion `c()` nicht leicht ersichtlich ist, dass die Vektorform ermittelt wird, sollte für diese Operation immer die Funktion  `as.vector()`  verwendet werden.
:::

::: {#exm-column-vectorform}
## Spaltenweise Vektorform einer Matrix
```{r}
matrixA |> as.vector()
matrixA |> c()
```
:::

Beim Umwandeln einer Matrix in ihre **zeilenweise Vektorform** wird in R ausgenutzt, dass diese Vektorform identisch mit der spaltenweisen Vektorform ihrer transponierten Matrix ist. Diese Gleichheit ergibt sich aus dem Transponieren, bei der Zeilen in Spalten umgewandelt werden (@exm-row-vectorform).

::: {#exm-row-vectorform}
## Zeilenweise Vektorform einer Matrix
```{r}
matrixA |> t() |> as.vector()
matrixA |> t() |> c()
```
:::

## Skalar- und Vektortransformationen

Bei Skalartransformationen wird ein einzelner Wert mit jedem Wert in der Matrix verknüpft. 

::: {#exm-skalar-matrix-transformation}
## Skalaraddition mit einer Matrix
```{r}
2 * matrixA
```
:::


Dieses Prinzip lässt sich auf Vektoren und Matrizen verallgemeinern. Bei Vektoren muss der Vektor die gleiche Länge wie die Zeilen der Matrix haben. Der Vektor wird dann *spaltenweise* mit der Matrix verknüpft (@exm-vektor-matrix-transformation). 

::: {#exm-vektor-matrix-transformation}
## Vektoraddition mit einer Matrix
```{r}
matrixA + 1:2
```
:::

::: {.callout-warning}
## Achtung!

Hat der Vektor keine passende Länge, dann wird die Länge des Vektors durch Wiederholung an die Länge der Matrix angepasst. Die Transformation erfolgt in diesem Fall wie eine Vektortransformation, wobei die Zeilen- und Spaltenstruktur der Matrix erhalten bleibt (@exm-vektor-matrix-transformation-upscaling). 
:::

::: {#exm-vektor-matrix-transformation-upscaling}
## Vektoraddition mit einer Matrix und einem inkompatiblen Vektor
```{r}
matrixA + 1:3
```
:::

Für die Transformation einer Matrix mit einer anderen Matrix mit R *müssen* beide Matrizen die gleiche Dimensionalität haben. Ist diese Voraussetzung gegeben, dann werden die Werte mit dem gleichen Index paarweise miteinander verknüpft (@exm-matrix-matrix-skalartransformation).

::: {.callout-warning}
## Achtung!

Werden zwei Matrizen unterschiedlicher Dimensionalität verknüpft, dann erweitert R die kleinere der beiden Matrizen **nicht**! 
:::

::: {#exm-matrix-matrix-skalartransformation}
## Verknüpfung von zwei Matrizen
```{r}
matrixB = matrix(c(1, 2, 2, 1, 1, 2), nrow = 2)

matrixA + matrixB
```
:::

### Matrizen vergleichen

Um die Gleichheit zwischen zwei Matrizen zu vergleichen, müssen zwei Bedingungen erfüllt sein:

1. Die Länge der beiden Matrizen muss gleich sein.
2. Die Dimensionalität der beiden Matrizen muss gleich sein.
3. An allen Positionen müssen die Werte gleich sein. 

Diese Prüfung übernimmt in R die Funktion `all.equal()`. Damit diese Funktion in logischen Ausdrücken verwendet werden kann, muss der Wert an der ersten Position des Ergebnisvektors ausgewertet werden, weil diese Funktion alle Unterschiede zwischen zwei Matrizen zurückgibt (@exm-all-equal).

::: {#exm-all-equal}
## Zwei Matrizen vergleichen

```{r}
all.equal(matrixA, matrixB)

# Für logische Ausdrücke
all.equal(matrixA, matrixB)[1] == TRUE
```
:::

## Kreuzprodukt

Das Kreuzprodukt (oder Matrixmultiplikation) ist eine Erweiterung der bekannten Multiplikation für Matrizen. Beim Kreuzprodukt muss die linke Matrix genausoviele Spalten haben, wie Zeilenanzahl der rechten Matrix. Das Kreuzprodukt ist dann wie folgt definiert: 

$$
\begin{aligned}
A \times B &= \begin{bmatrix} 
a_{11} & a_{12} & \cdots & a_{1n} \\
a_{21} & a_{22} & \cdots & a_{2n} \\
\vdots & \vdots & \ddots & \vdots \\
a_{m1} & a_{m2} & \cdots & a_{mn} \\
\end{bmatrix} 
\times
\begin{bmatrix} 
b_{11} & b_{12} & \cdots & b_{1p} \\
b_{21} & b_{22} & \cdots & b_{2p} \\
\vdots & \vdots & \ddots & \vdots \\
b_{n1} & b_{n2} & \cdots & b_{np} \\
\end{bmatrix} \\\
\\\
&= \begin{bmatrix} 
\sum_{i=1}^{n}{a_{1i} \cdot b_{i1}} & \sum_{i=1}^{n}{a_{1i} \cdot b_{i2}} & \cdots & \sum_{i=1}^{n}{a_{1i} \cdot b_{ip}} \\
\sum_{i=1}^{n}{a_{2i} \cdot b_{i1}} & \sum_{i=1}^{n}{a_{2i} \cdot b_{i2}} & \cdots & \sum_{i=1}^{n}{a_{2i} \cdot b_{ip}} \\
\vdots & \vdots & \ddots & \vdots \\
\sum_{i=1}^{n}{a_{mi} \cdot b_{i1}} & \sum_{i=1}^{n}{a_{mi} \cdot b_{i2}} & \cdots & \sum_{i=1}^{n}{a_{mi} \cdot b_{ip}} \\
\end{bmatrix} 
\end{aligned}
$$

In R wird das Kreuzprodukt mit dem `%*%`-Operator durchgeführt.  

```{r}
matrixA 
(matrixC = matrix(
    c(3, 2, 2, 3, 
      1, 2, 3, 1, 
      1, 2, 1, 1), 
    ncol = 4, 
    byrow = TRUE)
)

matrixA %*% matrixC

```

::: {.callout-tip}
## Praxis

Werden mehrere Matrizen nacheinander multipliziert, so können bekannte Matrizen vorab miteinander multipliziert werden, wenn sie in der Berechnung direkt aufeinanderfolgen. 
:::

### Zeilen- und Spaltensummen

Für die Zeilensumme ist ein Spaltenvektor notwendig. Dieser Vektor ist ein Einsvektor mit der Länge von der Anzahl der **Matrixspalten**. Wegen der Regeln für das Kreuzprodukt muss der Einsvektor der rechte Operand des Kreuzprodukts sein (@exm-matrix-zeilensumme). 

::: {#exm-matrix-zeilensumme}
## Zeilensumme

```{r}
matrixA %*% rep(1, ncol(matrixA))
```
:::

Für die Spaltensumme ist ein Zeilenvektor notwendig. Dieser Vektor ist ein Einsvektor mit der Länge von der Anzahl der **Matrixzeilen**. Weil R-Vektoren keine Orientierung haben, sondern immer als Spaltenvektoren behandelt werden, muss der Vektor noch transponiert werden. Bei der Zeilensumme ist ausserdem zu beachten, dass der Einsvektor der linke Operand des Kreuzprodukts sein muss (@exm-matrix-spaltensumme). 

::: {#exm-matrix-spaltensumme}
## Zeilensumme

```{r}
t(rep(1, nrow(matrixA))) %*% matrixA
```
:::

## Äusseres Vektorprodukt

Das äussere Vektorprodukt erlaubt es Matrizen aus den Werte von zwei Vektoren mit einem *beliebigen Operators* zu erzeugen. Im Gegensatz zum Kreuzprodukt ist die Orientierung der beiden Vektoren durch das äussere Produkt vorgegeben: Der zweite Vektor wird immer als Zeilenvektor angenommen. 

Der Operator des äusseren Produkts ist `%o%`, wobei als Verknüpfung die Multiplikation verwendet wird. Mit der Funktion `outer()` können beliebige Operatoren (d.h. Funktionen mit zwei Operatoren) angegeben werden.

::: {#exm-outerprodukt}
## Äusseres Produkt mit der Addition als Operator

```{r}
outer(1:3, 0:5, `+`)
```
:::

In der Anwendung sind logische Ausdrücke als Operatoren für das äussere Produkt von besonderer Bedeutung. In R müssen alle logischen Ausdrücke, die nicht nur eine Vergleichsoperation umfassen, als Funktion der `outer()`-Funktion übergeben werden (s. @exm-vorgängersumme).

::: {.callout-tip}
## Praxis

Mit dem äusseren Produkt über logische Ausdrücle lassen sich beliebige Matrizenstrukturen aus Sequenzen erzeugen. 
:::

### Dreieckmatrizen erzeugen

Dreiecksmatrizen werden in der Regel über das äussere Produkt zweier Sequenzen erzeugt. Es wird zwischen oberen und unteren Dreiecksmatrizen unterschieden. Bei einer oberen Dreiecksmatrix sind alle Positionen mit Zeilenindizes, welche kleiner als der jeweilige Spaltenindex sind, mit dem Wert `1` und alle anderen Position mit `0` belegt. Bei einer unteren Dreieckmatrix sind die Positionen mit dem Wert `1` belegt, an denen der Zeilenindex grösser als der Spaltenindex ist. Alternativ erzeugen die beiden Funktionen `upper.tri()` und `lower.tri()` die gewünschte Dreiecksmatrix aus einer existierenden Matrix.

::: {#exm-triangle-matrix}
## Erzeugen einer unteren Dreiecksmatrix
```{r}
1 * outer(1:4, 1:4, `>=`)

# etwas expressiver
1 * lower.tri(diag(4), diag = TRUE)
```
:::

### Vorgänger- und Nachfolgersummen

Vorgänger- und Nachfolgersummen bilden die Summe aus aufeinanderfolgenden Werten eines Vektors. Diese Summe kann durch die Kombination einer Matrixmultiplikation mit dem äusseren Produkt errreicht werden. Für diese Summen wird eine Matrix benötigt, in welcher an allen zu summierenden Positionen der Wert `1` (das neutrale Element der Multiplikation) steht. 

@exm-vorgängersumme bestimmt die Summe vom Wert und den beiden Vorgängern einer bestimmten Position in einem Vektor. Die Subtraktion mit `2` zeigt an, wie viele Werte vor der aktuellen Position berücksichtigt werden sollen.

::: {#exm-vorgängersumme}
## Vorgängersumme für einen Vektor der Länge 10

```{r}
vektor = 1:10
vektor %*% outer(
    1:10, 
    1:10, 
    function (a, b) (b >= a & a >= b - 2)
)
```
::: 

## Co-Occurence Matrizen

Eine Co-Occurence Matrix oder **Kontingenztabelle** aus zwei Vektoren lässt sich am leichtesten mit der `table()`-Funktion erstellen. Diese Funktion zählt das gemeinsame Auftreten von Werten in zwei *gleichlangen* Vektoren von beliebigen Datentyp.

Das Ergebnis ist eine *benannte Matrix*, wobei die Zeilen den Werten im ersten Vektor und die Spalten den Werten im zweiten Vektor entsprechen.

::: {#exm-coocmatrix-table}
## Kontingenztabelle für zwei Vektoren
```{r}
v1 = c(1, 2, 4, 3, 2, 1, 1, 2, 4)
v2 = c(9, 8, 7, 7, 7, 8, 9, 9, 8)

(ctable = table(v1, v2))

ctable[,2]
ctable[3,]
```
:::

## Determinanten

Die Determinante einer **quadratischen Matrix** $A$ wird mit der `det()`-Funktion ermittelt. 

::: {#exm-matrix-determinant}
## Determinante einer Matrix bestimmen
```{r}
# Eine quadratische Matrix aus matrixA erzeugen
(matrixQ = matrixA %*% t(matrixA))

det(matrixQ)
```
:::

## Eigenwerte

Die Eigenwerte $\lambda$ und Eigenvektoren einer **quadratischen Matrix** $A$ werden mit der Funktion `eigen()` bestimmt. Diese Funktion gibt eine benannte Liste zurück. Unter `values` finden sich die Eigenwerte der Matrix und unter `vectors` sind die Eigenvektoren als *Spaltenvektoren* gespeichert.

::: {#exm-matrix-eigenvalues}
## Eigenwerte und Eigenvektoren einer Matrix bestimmen
```{r}
basisQ = eigen(matrixQ)

basisQ[["values"]] # oder basisQ$values
basisQ[["vectors"]] # oder basisQ$vectors
```
:::

## Inversematrix

Die Inverse $A^{-1}$ einer **quadratischen Matrix** $A$ wird in R mit der Funktion `solve()` bestimmt (@exm-inverse-matrix).

::: {#exm-inverse-matrix}
## Inverse Matrix berechnen
```{r}
solve(matrixQ)
```
:::

## `Matrix`-Bibliothek {#sec-matrix-bibliothek}

Das Kreuzprodukt, das äussere Produkt und das Transponieren werden durch R automatisch bereitgestellt. Für komplexere Aufgaben oder sehr grossere Matrizen dient die Bibliothek `Matrix` [@bates_r_2023]. Diese Bibliothek gehört zur R-Standardinstallation und ist auf jedem System vorhanden. Die Bibliothek stellt alle relevanten Funktionen für Matrix-Operationen, die für mathematische Matrix-Operationen benötigt werden. 

Diese Bibliothek sollte immer geladen werden, wenn sehr grosse Matrizen oder Matrizen mit vielen `0`-Werten verwendet werden. Besonders für den zweiten Fall ist die sog. **Sparse Matrix** (deutsch "dünnbesetzte Matrix") von besonderer Bedeutung. Eine dünnbesetzte Matrix ist eine Matrix mit vielen `0`-Werten, wobei *viel* "mehr als ein Drittel der Positionen" bedeutet. In solchen Matrizen lässt R die `0`-Werte weg, so dass diese Werte keinen Speicher benötigen und keine Berechnungen für die entsprechenden Operationen (insbesondere beim Kreuzprodukt) durchgeführt werden. Abgesehen von dieser speziellen Behandlung der `0`-Werte unterscheiden sich dünnbesetzte Matrizen in R nicht von anderen Matrizen.

::: {#exm-sparsematrix-erzeugen}
## Dünnbesetzte Matrix erzeugen 

```{r}
library(Matrix)

Matrix( matrix(c(0, 1, 0, 0, 0, 1, 2, 0, 0), ncol = 3), sparse = TRUE)
```
:::

Die `Matrix`-Bibloiothek stellt ausserdem viele Hilfreiche Funktionen für die Arbeit mit Matrizen bereit. Dazu gehören beispielsweise die Funktionen `colSums()` und `rowSums()`, mit denen die Spalten- bzw. die Zeilensummen berechnet werden. @exm-matrix-spaltensumme und @exm-matrix-zeilensumme lassen sich so vereinfachen (@exm-matrix-spaltensumme-colsums).

::: {#exm-matrix-spaltensumme-colsums}
## Zeilen- und Spaltensumme mit der `Matrix`-Bibliothek

```{r}
colSums(matrixA)
rowSums(matrixA)
```
:::

Die Bibliothek stellt ausserdem mit der `band()`-Funktion eine komfortable Methode für diagonale Band-Matrizen bereit. Eine Bandmatrix heisst eine quadratische Matrix, die ein diagonales Werteband enthält. Mit dieser Funktion lassen sich Band-Matrize für gleitende Summen (@exm-vorgängersumme) leichter erzeugen (@exm-bandmatrix)

::: {#exm-bandmatrix}
## Vorgängersumme mit der `band()`-

```{r}
band(Matrix(1, 10, 10, sparse = TRUE), 0, 2)

vektor %*% band(Matrix(1, 10, 10, sparse = TRUE), 0, 2)
```
:::

